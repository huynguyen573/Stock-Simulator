package UseCases.RegisterUseCase;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;

public class RegistrationPage extends JFrame implements RegisterView {
    private JLabel stonksLabel;
    private JTextField txtUserName;
    private JPanel RegistrationPanel;
    private JLabel textUsername;
    private JPasswordField pfPwd;
    private JPasswordField pdPwdConfirm;
    private JLabel textConfirmPwd;
    private JLabel textPassword;
    private JButton btnRegister;
    private JButton btnBack;
    private JLabel txtPwdReq;
    private JLabel txtUsernameReq;

    public RegistrationPage() {
        super();

        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setContentPane(RegistrationPanel);
        this.pack();
        this.setVisible(true);
        this.getRootPane().setDefaultButton(btnRegister);
    }

    @Override
    public String getUsername() {
        return txtUserName.getText();
    }

    @Override
    public String getPassword() {
        return String.valueOf(pfPwd.getPassword());
    }

    @Override
    public String getPasswordConfirm() {
        return String.valueOf(pdPwdConfirm.getPassword());
    }

    @Override
    public void addRegisterAction(Runnable onRegister) {
        btnRegister.addActionListener(e -> onRegister.run());
    }

    @Override
    public void addBackAction(Runnable onBack) {
        btnBack.addActionListener(e -> onBack.run());
    }

    /**
     *
     */
    @Override
    public void presentUsernameError() {
        JOptionPane.showMessageDialog(null, "username already exists or it is empty or contains \"");
    }

    /**
     *
     */
    @Override
    public void presentPasswordInvalidError() {
        JOptionPane.showMessageDialog(null, "password does not meet valid requirements!");
    }

    /**
     *
     */
    @Override
    public void presentPasswordNotMatchError() {
        JOptionPane.showMessageDialog(null, "passwords do not match!");
    }

    @Override
    public void close() {
        dispose();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        RegistrationPanel = new JPanel();
        RegistrationPanel.setLayout(new GridLayoutManager(8, 3, new Insets(60, 60, 60, 60), -1, -1, true, false));
        RegistrationPanel.setBackground(new Color(-9077133));
        RegistrationPanel.setDoubleBuffered(false);
        RegistrationPanel.setFocusTraversalPolicyProvider(false);
        stonksLabel = new JLabel();
        stonksLabel.setAutoscrolls(true);
        stonksLabel.setBackground(new Color(-10066587));
        Font stonksLabelFont = this.$$$getFont$$$(null, Font.BOLD, 26, stonksLabel.getFont());
        if (stonksLabelFont != null) stonksLabel.setFont(stonksLabelFont);
        stonksLabel.setHorizontalAlignment(0);
        stonksLabel.setHorizontalTextPosition(0);
        stonksLabel.setText("Stonks Simulator Registration");
        RegistrationPanel.add(stonksLabel, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textUsername = new JLabel();
        Font textUsernameFont = this.$$$getFont$$$(null, -1, 16, textUsername.getFont());
        if (textUsernameFont != null) textUsername.setFont(textUsernameFont);
        textUsername.setText("Username");
        RegistrationPanel.add(textUsername, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        pfPwd = new JPasswordField();
        pfPwd.setBackground(new Color(-1));
        pfPwd.setDisabledTextColor(new Color(-14206903));
        pfPwd.setDropMode(DropMode.USE_SELECTION);
        pfPwd.setEnabled(true);
        Font pfPwdFont = this.$$$getFont$$$(null, -1, 16, pfPwd.getFont());
        if (pfPwdFont != null) pfPwd.setFont(pfPwdFont);
        pfPwd.setSelectionColor(new Color(-3604488));
        pfPwd.setText("");
        pfPwd.setVisible(true);
        RegistrationPanel.add(pfPwd, new GridConstraints(4, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        textPassword = new JLabel();
        Font textPasswordFont = this.$$$getFont$$$(null, -1, 16, textPassword.getFont());
        if (textPasswordFont != null) textPassword.setFont(textPasswordFont);
        textPassword.setText("Password");
        RegistrationPanel.add(textPassword, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        pdPwdConfirm = new JPasswordField();
        Font pdPwdConfirmFont = this.$$$getFont$$$(null, -1, 16, pdPwdConfirm.getFont());
        if (pdPwdConfirmFont != null) pdPwdConfirm.setFont(pdPwdConfirmFont);
        pdPwdConfirm.setSelectionColor(new Color(-3604488));
        RegistrationPanel.add(pdPwdConfirm, new GridConstraints(5, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        textConfirmPwd = new JLabel();
        Font textConfirmPwdFont = this.$$$getFont$$$(null, -1, 16, textConfirmPwd.getFont());
        if (textConfirmPwdFont != null) textConfirmPwd.setFont(textConfirmPwdFont);
        textConfirmPwd.setText("Confirm Password");
        RegistrationPanel.add(textConfirmPwd, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        RegistrationPanel.add(spacer1, new GridConstraints(6, 0, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        btnBack = new JButton();
        btnBack.setAutoscrolls(true);
        btnBack.setFocusTraversalPolicyProvider(false);
        btnBack.setFocusable(true);
        Font btnBackFont = this.$$$getFont$$$(null, -1, 14, btnBack.getFont());
        if (btnBackFont != null) btnBack.setFont(btnBackFont);
        btnBack.setHideActionText(false);
        btnBack.setHorizontalTextPosition(0);
        btnBack.setInheritsPopupMenu(true);
        btnBack.setMargin(new Insets(5, 5, 5, 5));
        btnBack.setSelected(false);
        btnBack.setText("Go Back");
        btnBack.setVerticalTextPosition(0);
        RegistrationPanel.add(btnBack, new GridConstraints(7, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        btnRegister = new JButton();
        btnRegister.setAutoscrolls(true);
        btnRegister.setFocusTraversalPolicyProvider(false);
        btnRegister.setFocusable(true);
        Font btnRegisterFont = this.$$$getFont$$$(null, -1, 14, btnRegister.getFont());
        if (btnRegisterFont != null) btnRegister.setFont(btnRegisterFont);
        btnRegister.setHideActionText(false);
        btnRegister.setHorizontalTextPosition(0);
        btnRegister.setInheritsPopupMenu(true);
        btnRegister.setMargin(new Insets(5, 5, 5, 5));
        btnRegister.setSelected(false);
        btnRegister.setText("Register");
        btnRegister.setVerticalTextPosition(0);
        RegistrationPanel.add(btnRegister, new GridConstraints(7, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        txtUserName = new JTextField();
        Font txtUserNameFont = this.$$$getFont$$$(null, -1, 16, txtUserName.getFont());
        if (txtUserNameFont != null) txtUserName.setFont(txtUserNameFont);
        txtUserName.setSelectionColor(new Color(-3604488));
        txtUserName.setText("Input Username Here");
        RegistrationPanel.add(txtUserName, new GridConstraints(3, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        txtPwdReq = new JLabel();
        txtPwdReq.setText("Password Requirements: 8 chars to 49 chars, no quotation marks ");
        RegistrationPanel.add(txtPwdReq, new GridConstraints(2, 0, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        txtUsernameReq = new JLabel();
        txtUsernameReq.setText("Username Requirements: 1 chars to 49 chars, no spaces, no quotation marks");
        RegistrationPanel.add(txtUsernameReq, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return RegistrationPanel;
    }

}